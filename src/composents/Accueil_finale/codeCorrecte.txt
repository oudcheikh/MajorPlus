
import React, { useState } from 'react';
import Level from './Level';
import Connector from './Connector';
import './accueil.css';

function App() {
  const [levels, setLevels] = useState([
    { title: "Fractions and Data", status: "in-progress" },
    { title: "Visualizing Fractions", status: "locked" },
    { title: "Introducing Number Lines", status: "locked" },
    { title: "Equivalent Fractions", status: "locked" },
  ]);

  const handleComplete = (index) => {
    const newLevels = levels.map((level, i) => {
      if (i === index) return { ...level, status: "completed" };
      if (i === index + 1) return { ...level, status: "in-progress" };
      return level;
    });
    setLevels(newLevels);

  };

  return (
    <div className="App22">
      <div className="path">
        {levels.map((level, index) => (
          <React.Fragment key={index}>
            <Level
              title={level.title}
              status={level.status}
              onComplete={() => handleComplete(index)}
            />
            <div style={{marginBottom:"10px"}}></div>
            {index < levels.length - 1 && (
              <Connector
                completed={levels[index].status === "completed"}
                inProgress={levels[index + 1].status === "in-progress"}
              />
            )}

          </React.Fragment>
        ))}
      </div>
    </div>
  );
}

export default App;



.App22 {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 20px;
    background-image: url("/public/images/bg.PNG")
  }
  
  .path {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    position: relative;
    margin: 20px;
  }
  





import React from 'react';
import { motion } from 'framer-motion';
import './Level.css';

function Level({ title, status, onComplete }) {


  return (
    <div>
    <motion.div 
      className={`level ${status}`} 
      initial={{ opacity: 0, scale: 0.8 }} 
      animate={{ opacity: 1, scale: 1 }} 
      transition={{ duration: 0.5 }}
      onClick={status === 'in-progress' ? onComplete : null}
    >
     
    </motion.div>
     <span className="level-title">{title}</span>
     </div>
  );
}




export default Level;
.level {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    margin: 20px 0;
    padding: 20px;
    border-radius: 50%;
    width: 100px;
    height: 100px;
    text-align: center;
    transition: transform 0.3s ease-in-out;
    cursor: pointer;
    position: relative;
    z-index: 1;
}

.level.completed {
    /* background-color: #4caf50; */
    background-image: url('/public/images/valide_button.PNG');
    color: rgb(7, 7, 7);
    background-repeat: no-repeat;
    background-position: center;
}

.level.in-progress {
    background-image: url("/public/images/bouton.PNG");
    background-repeat: no-repeat;
    color: black;
}

.level.locked {
    background-color: white;
    color: rgb(13, 13, 13);
    cursor: not-allowed;
    background-image: url("/public/images/locked.PNG");
    background-repeat: no-repeat;
    background-position: center;

}
.level-title {
    color: rgb(21, 20, 20);
    font-weight: bold;
    text-align: center;
    padding: 10px;
   
  }

/*por les icones des boutons */
.icon {
    font-size: 2em;
    margin-bottom: 10px;
}

.title {
    font-size: 1.2em;
    font-weight: bold;
}



import React from 'react';
import './Connector.css';

function Connector({ completed, inProgress }) {
  return (
    <div className={`connector ${completed ? 'completed' : inProgress ? 'in-progress' : 'locked'}`} />
  );
}

export default Connector;


.connector {
    width: 7px;
    height:100px;
    background-color: #9e9e9e;
    position: relative;
    transition: background-color 0.3s ease-in-out;
    z-index: 0;
  }
  
  .connector.completed {
    background-color: #4caf50;
  }
  
  .connector.in-progress {
    background-color: #ffeb3b;
  }
  